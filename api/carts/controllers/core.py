from typing import Protocol

from api.carts.schemas.models import CartModel, CartUserModel
from api.context import Context
from api.controller import Controller, Repository
from api.errors import LoggedOut
from api.items.schemas.models import ItemModel
from api.users.schemas.models import UserModel


class CartRepository(Repository, Protocol):
    def insert_cart(self, user_id: int, model: CartModel): ...
    def insert_cart_user(self, model: CartUserModel): ...
    def insert_cart_item(self, cart_id: int, item_id: int): ...
    def select_items(self) -> dict[int, ItemModel]: ...
    def select_carts(self, user_id: int) -> dict[int, CartModel]: ...
    def select_cart_items(self, cart_id: int) -> list[ItemModel]: ...
    def select_cart(self, user_id: int, cart_id: int) -> CartModel | None: ...
    def select_user_by_token(self, token: str) -> UserModel | None: ...
    def update_cart(self, model: CartModel): ...
    def delete_cart(self, cart_id: int): ...
    def delete_cart_item(self, cart_id: int, item_id: int): ...


class CartController(Controller):
    def __init__(self, ctx: Context, repository: CartRepository) -> None:
        self.repository = repository
        super().__init__(ctx, repository)

    def validate_access(self):
        issuer = self.repository.select_user_by_token(
            self.ctx.get("token", "")
        )
        if issuer is None:
            raise LoggedOut
        self.issuer = issuer
